O comando a seguir mostra onde está o arquivo php.ini: 
    php --ini

Em alguns casos no Windows também pode ser necessário descomentar a seguinte linha do php.ini:
    ;extension_dir=ext

Link ensinando como trabalhar com datas: 
https://www.alura.com.br/artigos/manipulando-datas-e-horarios-com-php

PDO = PHP Data Objects. É uma interface que permite ao PHP se comunicar com 
diferentes databases.

O comando $pdo->exec() retorna o número de linhas afetadas pelo comando SQL.

O comando $pdo->query() retorna um resultset após a execução do SQL. O objeto
resultset possui vários métodos (inclusive o fetchAll) para buscar dados.

Ao buscar dados com fetchAll, é possível escolher o estilo de busca 
(fetch style). Por padrão, a busca retorna um array no fetch style FETCH_BOTH,
ou seja, o array indexa tanto pelo nome da coluna quanto pelo número da coluna.

FETCH_ASSOC é usado para retornar apenas o array associativo, sem o índice 
numérico.

FETCH_CLASS é usado para que o PDO instancie uma classe específica do seu 
modelo. Mas para ele funcionar, é necessário que haja um construtor sem 
parâmetros nessa classe. E ainda é possível que alguns parâmetros (como datas)
não sejam inicializados corretamente. Nesse caso, pode ser melhor usar o 
FETCH_ASSOC e depois usar um foreach para inicializar cada objeto.

O fetchAll pode exigir muita memória. Portanto, executar o comando fetch 
(bucando linha a linha, com o while) pode ser mais econômico e controlado.

Há também o comando fetchColumn, que busca a coluna indicada na próxima linha
do cursor do resultset.

Sintaxe prepared Statement no PDO: 
    $statement = $pdo->prepare($sql);
    $statement->bindValue(1, "Primeiro valor.");
    $statement->bindValue(2, "Segundo valor.");
    $statement->execute();

O prepared statement também pode usar nomes de variáveis ao invés de 
numeração por colunas: 
    $sqlInsert = "INSERT INTO students (name, birth_date) VALUES (:name, :birth_date);";
    $statement = $pdo->prepare($sqlInsert);
    $statement->bindValue(':name', $student->name());
    $statement->bindValue(':birth_date', $student->birthDate()->format('Y-m-d'));
    $statement->execute();

Os parâmetros no método bindValue:
    ou devem usar somente nomes; 
    ou somente pontos de interrogação.

O método bindParam em Statement associa um parâmetro a uma variável declarada.
Desta forma, o valor só é jogado na statement quando chamarem o método execute.

O terceiro parâmetro do método bindValue/bindParam define o seu tipo de dados.
Todos eles são identificados por PDO::PARAM_[tipo_do_parâmetro]. O tipo padrão 
é PDO::PARAM_STR.

Para números decimais, a recomendação é continuar enviando o parâmetro como 
string. O database vai tratar da melhor forma os números decimais.

É possível informar um array associativo para a função execute de um statement
que use parâmetros nomeados.
    Ex.: 
        $insertQuery = 'INSERT INTO students(name, birth_date) VALUES (:name, :birth_date);';
        $stmt = $this->connection->prepare($insertQuery);
        $success = $stmt->execute([
            ':name' => $student->name(),
            ':birth_date' => $student->birthDate()->format('Y-m-d'),
        ]);

Ou informar um array numérico para a função execute de um statement que use
parâmetros que usam pontos de interrogação.
    Ex.:
        $insertQuery = 'INSERT INTO students(name, birth_date) VALUES (?, ?);';
        $stmt = $this->connection->prepare($insertQuery);
        $success = $stmt->execute([
            $student->name(),
            $student->birthDate()->format('Y-m-d'),
        ]);

Diferença entre DAO e Repositório:
    DAO tem apenas os 4 métodos do CRUD;
    Repositórios tem outros métodos além daqueles do CRUD.

É interessante que o repositório parametrize a conexão que será usada para
consultar o banco de dados. Isso torna o código mais fácil de testar. Isso é 
chamado de injeção de dependência.
